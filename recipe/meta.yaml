{% set version = "0.15.0" %}
{% set posix = 'm2-' if win else '' %}
{% set native = 'm2w64-' if win else '' %}

package:
  name: r-r.cache
  version: {{ version|replace("-", "_") }}

source:
  fn: R.cache_{{ version }}.tar.gz
  url:
    - {{ cran_mirror }}/src/contrib/R.cache_{{ version }}.tar.gz
    - {{ cran_mirror }}/src/contrib/Archive/R.cache/R.cache_{{ version }}.tar.gz
  sha256: adb4d3b08f7917e10fe6188c7b90a3318701a974c58eaa09943b929382bdf126

build:
  noarch: generic
  merge_build_host: true  # [win]
  number: 0
  rpaths:
    - lib/R/lib/
    - lib/

requirements:
  build:
    - {{ posix }}zip               # [win]
  host:
    - r-base
    - r-r.methodss3 >=1.7.1
    - r-r.oo >=1.23.0
    - r-r.utils >=2.8.0
    - r-digest >=0.6.13
  run:
    - r-base
    - r-r.methodss3 >=1.7.1
    - r-r.oo >=1.23.0
    - r-r.utils >=2.8.0
    - r-digest >=0.6.13

test:
  commands:
    - $R -e "library('R.cache')"           # [not win]
    - "\"%R%\" -e \"library('R.cache')\""  # [win]

about:
  home: https://github.com/HenrikBengtsson/R.cache
  license: LGPL (>= 2.1)
  summary: Memoization can be used to speed up repetitive and computational expensive function calls.  The first time a function that implements memoization is called the results are stored in a cache memory.  The next time the function is called with the same set of parameters, the results are momentarily retrieved from
    the cache avoiding repeating the calculations.  With this package, any R object can be cached in a key-value storage where the key can be an arbitrary set of R objects.  The cache memory is persistent (on the file system).
  license_family: LGPL
  license_file:
    - {{ environ["PREFIX"] }}/lib/R/share/licenses/LGPL-2.1

extra:
  recipe-maintainers:
    - conda-forge/r
